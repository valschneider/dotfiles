;; -*- mode: emacs-lisp; -*-

;; MELPA
(require 'package)
(add-to-list 'package-archives
	     '("melpa-stable" . "https://stable.melpa.org/packages/") t)
(when (< emacs-major-version 24)
  ;; For important compatibility libraries like cl-lib
  (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))

(package-initialize)

;; Derived from https://stackoverflow.com/a/10093312/5096023
;; Only need to do that for use-package)
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

;; ===== Eye-candy =====

;; GUIs are for the weak
(setq inhibit-startup-message t)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(menu-bar-mode -1)

;; Show line number
(global-linum-mode t)
;; Show column number
(setq column-number-mode t)

;; Don't put anything in scratch
(setq initial-scratch-message nil)

;; 3 letters is too much
(fset 'yes-or-no-p 'y-or-n-p)

;; Colour theme
(use-package zenburn-theme :ensure t)

;; C tab style
(setq c-default-style "linux")

;; ===== Modes =====

;; ----- Whitespace -----
;; Delete whitespaces on saving
(add-hook 'before-save-hook 'whitespace-cleanup)

;; Local toggle
(defun toggle-whitespace-cleanup()
  (interactive)

  ;; FIXME: this wants to use buffer local hook
  (if (member 'whitespace-cleanup before-save-hook)
      (progn
	(remove-hook 'before-save-hook 'whitespace-cleanup nil)
	(message "whitespace-cleanup disabled"))
    (progn
      (add-hook 'before-save-hook 'whitespace-cleanup nil nil)
      (message "whitespace-cleanup enabled"))))

;; ----- Static analysis -----
(use-package flycheck
  :ensure t
  :config (add-hook 'after-init-hook #'global-flycheck-mode))
;;(add-hook 'after-init-hook #'global-flycheck-mode)

(add-to-list 'load-path "~/.emacs.d/packages/flycheck-tla/")
(use-package flycheck-tla)

;; Helm
(use-package helm
  :ensure t
  :init (setq helm-split-window-in-side-p t)
  :config (helm-mode 1)
  :bind (("M-x" . helm-M-x)
	 ("C-x C-r" . helm-find)))

;; ----- YAML -----
(add-to-list 'load-path "~/.emacs.d/packages/yaml-mode/")
(use-package yaml-mode
  :config (add-to-list 'auto-mode-alist '("\\.yaml\\'" . yaml-mode)))

;; ----- TLA -----
(add-to-list 'load-path "~/.emacs.d/packages/tla-mode/")
(use-package tla-mode)

(defun call-pluscal-on-current()
  (interactive)
  (shell-command
   (format "pluscal %s"
	   (shell-quote-argument (buffer-file-name))))
  )

(defun highlight-tlc-traceback()
  (interactive)
  ;; Software control
  (highlight-regexp "\\(pc\\|stack\\)\\ =.*" 'hi-green)
  (highlight-regexp "context\\ =.*" 'hi-pink)
  ;; Software data
  (highlight-regexp "\\(lrs\\ |->\\|irqs\\|ap_list\\|used_lrs\\|apr\\)" 'hi-blue)
  ;; Hardware
  (highlight-regexp "\\ \\(lrs\\|distributor\\|queue\\|ack\\|vcpu_itfs\\|cpu_itfs\\)\\ =.*" 'hi-yellow))


;; ===== Misc =====

;; Change backup (~) behaviour
(setq backup-directory-alist `(("." . "~/.emacs_saves")))
(setq backup-by-copying t)
(setq delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t)

;; Make selection sane
(delete-selection-mode t)

;; Prevent agenda from nuking my windows
(setq org-agenda-window-setup 'current-window)

;; Window selection goodness
;; NOTE: not so good with orgmode...
;; (global-set-key (kbd "C-c <left>")  'windmove-left)
;; (global-set-key (kbd "C-c <right>") 'windmove-right)
;; (global-set-key (kbd "C-c <up>")    'windmove-up)
;; (global-set-key (kbd "C-c <down>")  'windmove-down)

;; Enable auto-complete
;;(ac-config-default)

;;(define-key ac-mode-map (kbd "<C-tab>") 'auto-complete)

;; enable python auto-complete
;;(add-hook 'python-mode-hook 'jedi:setup)
;;(setq jedi:complete-on-dot t)
